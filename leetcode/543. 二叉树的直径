给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。
注意：两结点之间的路径长度是以它们之间边的数目表示。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

 //深度优先搜索
 //两个叶子节点之间的最短路径的最大距离 等于 根结点的左右子树的深度之和
class Solution {
    int max = 0;
    public int diameterOfBinaryTree(TreeNode root) { 
        depth(root);
        return max; 
    }

    public int depth (TreeNode rt) {
        if(rt == null) {
            return 0; //递归结束的出口
        }
        int L,R;
        L = depth(rt.left); // 求左孩子节点的深度
        R = depth(rt.right); // 求右孩子节点的深度

        if(L+R > max){ //每一次递归都进行比较
        max = L+R; //如果当前找到更大的路径值就替换
        }
        return Math.max(L,R) + 1;  // 返回该节点的深度
    }
}
